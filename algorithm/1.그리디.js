/** 
 * 그리디(Greedy)는 
1. 현재 상황에서 당장 좋은 것만 고르는 방법을 의미한다.
2. 문제를 풀기 위한 최소한의 아이디어를 떠올릴 수 있는 능력을 요구한다.
3. 그러나 정당성 분석이 매우 중요하다.
*/

/**
<대표적인 그리디 알고리즘 "거스름돈 문제">

당신은 음식점의 계산을 도와주는 점원입니다. 카운터에는 거스름돈으로 사용할 500원, 100원, 50원, 10원짜리 동전이 무한히 존재한다고 가정합니다.

손님에게 거슬러 주어야 할 돈이 N원일 때 거슬러주어야 할 동전의 최소 개수를 구하세요. (단, 거슬러줘야 할 돈 N은 항상 10의 배수입니다.)

*/

// 해답
// function solution(n) {
//   let count = 0;
//   const coins = [500, 100, 50, 10];

//   for (let i = 0; i < coins.length; i++) {
//     count += Math.floor(n / coins[i]); //동전의 개수 === 몫
//     n = n % coins[i]; // 남은 돈 === 나머지
//   }

//   return count;
// }

// console.log(solution(1260));

/**
1. 화폐의 종류가 K라고 할 때, 시간 복잡도는 N(K)이다.
 */

/**
 * 문제 1

어떠한 수 N이 1이 될 때까지 다음의 두 과정 중 하나를 반복적으로 선택하여 수행하려고 합니다. 단, 두번째 연산은 N이 K로 나누어 떨어질 때만 선택할 수 있습니다.

N에서 1을 뺍니다.
N을 K로 나눕니다.
예를 들어 N이 17, K가 4라고 가정합시다. 이 때 1번의 과정을 한 번 수행하면 N은 16이 됩니다. 이후에 2번의 과정을 두번 수행하면 N은 1이 됩니다. 결과적으로 이 경우 전체 과정을 실행한 횟수는 3이 됩니다. 이는 N을 1로 만드는 최소 횟수입니다.

N과 K가 주어질 때 N이 1이 될 때까지 1번 혹은 2번의 과정을 수행해야 하는 최소 횟수를 구하는 프로그램을 작성하세요.
 */

// function solution(n, k) {
//   let count = 0;
//   while (n !== 1) {
//     n % k === 0 ? n = n / k : n = n - 1;
//     count++;
//   }

//   return count;
// }

// console.log(solution(17, 4));
// console.log(solution(25, 5));

/**
 * 문제 2
각 자리가 숫자(0부터 9)로만 이루어진 문자열 S가 주어졌을 때, 
왼쪽부터 오른쪽으로 하나씩 모든 숫자를 확인하며 숫자 사이에 'X' 혹은 '+' 연산자를 넣어
결과적으로 만들어질 수 있는 가장 큰 수를 구하는 프로그램을 작성하세요.
단, +보다 X를 먼저 계산하는 일반적인 방식과는 달리, 모든 연산은 왼쪽에서부터 순서대로 이루어진다고 가정합니다.
예를 들어, 02984 라는 문자열로 만들 수 있는 가장 큰 수는 ((((0+2)*9)*8)*4) = 576 입니다. 
또한 만들어질 수 있는 가장 큰 수는 항상 20억 이하의 정수가 되도록 입력이 주어집니다. */

function solution(s) {
  const answer = s.split('').map(v => parseInt(v))
    .reduce((a, b) => {
      if (a <= 1 || b <= 1) return a + b;
      else return a * b;
    })
  return answer;
}

console.log(solution('02984'));
console.log(solution('567'));